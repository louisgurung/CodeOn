/*[1]Given a year, return the century it is in. The first century spans from the year 1 up to and including the year 100, the second - from the year 101 up to and including the year 200, etc.

Example

For year = 1905, the output should be
centuryFromYear(year) = 20;
For year = 1700, the output should be
centuryFromYear(year) = 17.*/


int centuryFromYear(int year) {
    int rem = year/100;
    if (year%100==0)
    return  rem;
    else 
    return rem+1;
    }

/*[2]Given the string, check if it is a palindrome.

Example

For inputString = "aabaa", the output should be
checkPalindrome(inputString) = true;
For inputString = "abac", the output should be
checkPalindrome(inputString) = false;
For inputString = "a", the output should be
checkPalindrome(inputString) = true.*/

boolean checkPalindrome(String inputString) {
String rev = "";
    for (int i = inputString.length()-1;i>=0;i--){
        rev+=inputString.charAt(i);
    }
    if (rev.equals(inputString))
        return true;
    return false; 
    }
    
    /*[3]Given an array of integers, find the pair of adjacent elements that has the largest product and return that product.

Example

For inputArray = [3, 6, -2, -5, 7, 3], the output should be
adjacentElementsProduct(inputArray) = 21.

7 and 3 produce the largest product.*/

int adjacentElementsProduct(int[] inputArray) {
 int pro = inputArray[0]*inputArray[1];
 for (int i = 1;i<inputArray.length-1;i++){
  if (pro<(inputArray[i]*inputArray[i+1]))
  pro = inputArray[i]*inputArray[i+1];
 }
 return pro;
}

/*[4]Below we will define an n-interesting polygon. Your task is to find the area of a polygon for a given n.

A 1-interesting polygon is just a square with a side of length 1. An n-interesting polygon is obtained by taking the n - 1-interesting polygon and appending 1-interesting polygons to its rim, side by side. You can see the 1-, 2-, 3- and 4-interesting polygons in the picture below.
Example
For n = 2, the output should be
shapeArea(n) = 5;
For n = 3, the output should be
shapeArea(n) = 13.*/

nt shapeArea(int n) {
     if (n==1)
     return 1;
     return shapeArea(n-1)+4*(n-1);
}

/*[5]Ratiorg got statues of different sizes as a present from CodeMaster for his birthday, each statue having an non-negative integer size. Since he likes to make things perfect, he wants to arrange them from smallest to largest so that each statue will be bigger than the previous one exactly by 1. He may need some additional statues to be able to accomplish that. Help him figure out the minimum number of additional statues needed.

Example

For statues = [6, 2, 3, 8], the output should be
makeArrayConsecutive2(statues) = 3.

Ratiorg needs statues of sizes 4, 5 and 7.*/


